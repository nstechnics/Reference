
Microwave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000400  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000038c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003a  00800100  00800100  00000400  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000430  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000470  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001073  00000000  00000000  000004d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a18  00000000  00000000  0000154b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000054d  00000000  00000000  00001f63  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000144  00000000  00000000  000024b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006ae  00000000  00000000  000025f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000045a  00000000  00000000  00002ca2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  000030fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	22 c1       	rjmp	.+580    	; 0x286 <__vector_16>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	c4 c0       	rjmp	.+392    	; 0x1d2 <__vector_18>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	aa 33       	cpi	r26, 0x3A	; 58
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	46 d1       	rcall	.+652    	; 0x336 <main>
  aa:	6e c1       	rjmp	.+732    	; 0x388 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <atmel_start_init>:
		break;
	case PORT_DIR_OUT:
		DDRA |= mask;
		break;
	case PORT_DIR_OFF:
		DDRA &= ~mask;
  ae:	8a b3       	in	r24, 0x1a	; 26
  b0:	1a ba       	out	0x1a, r1	; 26

		PORTA |= mask;
  b2:	8b b3       	in	r24, 0x1b	; 27
  b4:	8f ef       	ldi	r24, 0xFF	; 255
  b6:	8b bb       	out	0x1b, r24	; 27
		break;
	case PORT_DIR_OUT:
		DDRB |= mask;
		break;
	case PORT_DIR_OFF:
		DDRB &= ~mask;
  b8:	97 b3       	in	r25, 0x17	; 23
  ba:	17 ba       	out	0x17, r1	; 23

		PORTB |= mask;
  bc:	98 b3       	in	r25, 0x18	; 24
  be:	88 bb       	out	0x18, r24	; 24
		break;
	case PORT_DIR_OUT:
		DDRC |= mask;
		break;
	case PORT_DIR_OFF:
		DDRC &= ~mask;
  c0:	94 b3       	in	r25, 0x14	; 20
  c2:	14 ba       	out	0x14, r1	; 20

		PORTC |= mask;
  c4:	95 b3       	in	r25, 0x15	; 21
  c6:	85 bb       	out	0x15, r24	; 21
		break;
	case PORT_DIR_OUT:
		DDRD |= mask;
		break;
	case PORT_DIR_OFF:
		DDRD &= ~mask;
  c8:	91 b3       	in	r25, 0x11	; 17
  ca:	11 ba       	out	0x11, r1	; 17

		PORTD |= mask;
  cc:	92 b3       	in	r25, 0x12	; 18
  ce:	82 bb       	out	0x12, r24	; 18
		break;
	case PORT_DIR_OUT:
		DDRE |= mask;
		break;
	case PORT_DIR_OFF:
		DDRE &= ~mask;
  d0:	92 b1       	in	r25, 0x02	; 2
  d2:	12 b8       	out	0x02, r1	; 2

		PORTE |= mask;
  d4:	93 b1       	in	r25, 0x03	; 3
  d6:	83 b9       	out	0x03, r24	; 3
		break;
	case PORT_DIR_OUT:
		DDRF |= mask;
		break;
	case PORT_DIR_OFF:
		DDRF &= ~mask;
  d8:	e1 e6       	ldi	r30, 0x61	; 97
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	90 81       	ld	r25, Z
  de:	10 82       	st	Z, r1

		PORTF |= mask;
  e0:	e2 e6       	ldi	r30, 0x62	; 98
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	90 81       	ld	r25, Z
  e6:	80 83       	st	Z, r24
		break;
	case PORT_DIR_OUT:
		DDRG |= mask;
		break;
	case PORT_DIR_OFF:
		DDRG &= ~mask;
  e8:	e4 e6       	ldi	r30, 0x64	; 100
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	80 7e       	andi	r24, 0xE0	; 224
  f0:	80 83       	st	Z, r24

		PORTG |= mask;
  f2:	e5 e6       	ldi	r30, 0x65	; 101
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	8f 61       	ori	r24, 0x1F	; 31
  fa:	80 83       	st	Z, r24
	switch (direction) {
	case PORT_DIR_IN:
		DDRB &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRB |= 1 << pin;
  fc:	87 b3       	in	r24, 0x17	; 23
  fe:	81 60       	ori	r24, 0x01	; 1
 100:	87 bb       	out	0x17, r24	; 23
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTB |= 1 << pin;
	} else {
		PORTB &= ~(1 << pin);
 102:	88 b3       	in	r24, 0x18	; 24
 104:	8e 7f       	andi	r24, 0xFE	; 254
 106:	88 bb       	out	0x18, r24	; 24
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRB &= ~(1 << pin);
 108:	87 b3       	in	r24, 0x17	; 23
 10a:	8d 7f       	andi	r24, 0xFD	; 253
 10c:	87 bb       	out	0x17, r24	; 23
		DDRB &= ~(1 << pin);

		PORTB |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTB &= ~(1 << pin);
 10e:	88 b3       	in	r24, 0x18	; 24
 110:	8d 7f       	andi	r24, 0xFD	; 253
 112:	88 bb       	out	0x18, r24	; 24
	// Clock source: System Clock
	// Clock value: 2000.000 kHz
	// Mode: Normal top=0xFF
	// OC0 output: Disconnected
	// Timer Period: 0.025 ms
	ASSR=0<<AS0;
 114:	10 be       	out	0x30, r1	; 48
	TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (1<<CS01) | (0<<CS00);
 116:	82 e0       	ldi	r24, 0x02	; 2
 118:	83 bf       	out	0x33, r24	; 51
	TCNT0=0xCE;
 11a:	8e ec       	ldi	r24, 0xCE	; 206
 11c:	82 bf       	out	0x32, r24	; 50
	OCR0=0x00;
 11e:	11 be       	out	0x31, r1	; 49
	// Timer1 Overflow Interrupt: Off
	// Input Capture Interrupt: Off
	// Compare A Match Interrupt: Off
	// Compare B Match Interrupt: Off
	// Compare C Match Interrupt: Off
	TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<COM1C1) | (0<<COM1C0) | (0<<WGM11) | (0<<WGM10);
 120:	1f bc       	out	0x2f, r1	; 47
	TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
 122:	1e bc       	out	0x2e, r1	; 46
	TCNT1H=0x00;
 124:	1d bc       	out	0x2d, r1	; 45
	TCNT1L=0x00;
 126:	1c bc       	out	0x2c, r1	; 44
	ICR1H=0x00;
 128:	17 bc       	out	0x27, r1	; 39
	ICR1L=0x00;
 12a:	16 bc       	out	0x26, r1	; 38
	OCR1AH=0x00;
 12c:	1b bc       	out	0x2b, r1	; 43
	OCR1AL=0x00;
 12e:	1a bc       	out	0x2a, r1	; 42
	OCR1BH=0x00;
 130:	19 bc       	out	0x29, r1	; 41
	OCR1BL=0x00;
 132:	18 bc       	out	0x28, r1	; 40
	OCR1CH=0x00;
 134:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	OCR1CL=0x00;
 138:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	// Timer/Counter 2 initialization
	// Clock source: System Clock
	// Clock value: Timer2 Stopped
	// Mode: Normal top=0xFF
	// OC2 output: Disconnected
	TCCR2=(0<<WGM20) | (0<<COM21) | (0<<COM20) | (0<<WGM21) | (0<<CS22) | (0<<CS21) | (0<<CS20);
 13c:	15 bc       	out	0x25, r1	; 37
	TCNT2=0x00;
 13e:	14 bc       	out	0x24, r1	; 36
	OCR2=0x00;
 140:	13 bc       	out	0x23, r1	; 35
	// Timer3 Overflow Interrupt: Off
	// Input Capture Interrupt: Off
	// Compare A Match Interrupt: Off
	// Compare B Match Interrupt: Off
	// Compare C Match Interrupt: Off
	TCCR3A=(0<<COM3A1) | (0<<COM3A0) | (0<<COM3B1) | (0<<COM3B0) | (0<<COM3C1) | (0<<COM3C0) | (0<<WGM31) | (0<<WGM30);
 142:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
	TCCR3B=(0<<ICNC3) | (0<<ICES3) | (0<<WGM33) | (0<<WGM32) | (0<<CS32) | (0<<CS31) | (0<<CS30);
 146:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
	TCNT3H=0x00;
 14a:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
	TCNT3L=0x00;
 14e:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	ICR3H=0x00;
 152:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	ICR3L=0x00;
 156:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	OCR3AH=0x00;
 15a:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
	OCR3AL=0x00;
 15e:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	OCR3BH=0x00;
 162:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
	OCR3BL=0x00;
 166:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	OCR3CH=0x00;
 16a:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
	OCR3CL=0x00;
 16e:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>

	// Timer(s)/Counter(s) Interrupt(s) initialization
	TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
 172:	17 be       	out	0x37, r1	; 55
	ETIMSK=(0<<TICIE3) | (0<<OCIE3A) | (0<<OCIE3B) | (0<<TOIE3) | (0<<OCIE3C) | (0<<OCIE1C);
 174:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <__TEXT_REGION_LENGTH__+0x7e007d>
	// INT3: Off
	// INT4: Off
	// INT5: Off
	// INT6: Off
	// INT7: Off
	EICRA=(0<<ISC31) | (0<<ISC30) | (0<<ISC21) | (0<<ISC20) | (0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
 178:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	EICRB=(0<<ISC71) | (0<<ISC70) | (0<<ISC61) | (0<<ISC60) | (0<<ISC51) | (0<<ISC50) | (0<<ISC41) | (0<<ISC40);
 17c:	1a be       	out	0x3a, r1	; 58
	EIMSK=(0<<INT7) | (0<<INT6) | (0<<INT5) | (0<<INT4) | (0<<INT3) | (0<<INT2) | (0<<INT1) | (0<<INT0);
 17e:	19 be       	out	0x39, r1	; 57
	// Communication Parameters: 8 Data, 1 Stop, No Parity
	// USART0 Receiver: On
	// USART0 Transmitter: On
	// USART0 Mode: Asynchronous
	// USART0 Baud Rate: 38400
	UCSR0A=(0<<RXC0) | (0<<TXC0) | (0<<UDRE0) | (0<<FE0) | (0<<DOR0) | (0<<UPE0) | (0<<U2X0) | (0<<MPCM0);
 180:	1b b8       	out	0x0b, r1	; 11
	UCSR0B=(1<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (1<<RXEN0) | (1<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
 182:	88 e9       	ldi	r24, 0x98	; 152
 184:	8a b9       	out	0x0a, r24	; 10
	UCSR0C=(0<<UMSEL0) | (0<<UPM01) | (0<<UPM00) | (0<<USBS0) | (1<<UCSZ01) | (1<<UCSZ00) | (0<<UCPOL0);
 186:	86 e0       	ldi	r24, 0x06	; 6
 188:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
	UBRR0H=0x00;
 18c:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L=0x19;
 190:	89 e1       	ldi	r24, 0x19	; 25
 192:	89 b9       	out	0x09, r24	; 9

	// USART1 initialization
	// USART1 disabled
	UCSR1B=(0<<RXCIE1) | (0<<TXCIE1) | (0<<UDRIE1) | (0<<RXEN1) | (0<<TXEN1) | (0<<UCSZ12) | (0<<RXB81) | (0<<TXB81);
 194:	10 92 9a 00 	sts	0x009A, r1	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>

	// ADC initialization
	// ADC disabled
	ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
 198:	16 b8       	out	0x06, r1	; 6

	// SPI initialization
	// SPI disabled
	SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
 19a:	1d b8       	out	0x0d, r1	; 13

	// TWI initialization
	// TWI disabled
	TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);	
 19c:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 1a0:	08 95       	ret

000001a2 <getchar_0>:
// Get a character
char getchar_0()
{
	char        status;

	while (((status = UCSR0A) & 0x80) == 0);
 1a2:	5f 9b       	sbis	0x0b, 7	; 11
 1a4:	fe cf       	rjmp	.-4      	; 0x1a2 <getchar_0>
	return  UDR0;            // USART 0 Data Receive
 1a6:	8c b1       	in	r24, 0x0c	; 12
}
 1a8:	08 95       	ret

000001aa <putchar_0>:
// Putt a character
void putchar_0(int ich)
{
	while(!(UCSR0A & 0x20));
 1aa:	5d 9b       	sbis	0x0b, 5	; 11
 1ac:	fe cf       	rjmp	.-4      	; 0x1aa <putchar_0>
	UDR0 = (unsigned char) ich;
 1ae:	8c b9       	out	0x0c, r24	; 12
 1b0:	08 95       	ret

000001b2 <Recieve_Buffer_Clr>:
}
void Recieve_Buffer_Clr(void)
{
	unsigned short i;
	for (i = 0; i < UART0_RCV_BUFF_SIZE; i++)	UART0_R_Data[i] = 0x00;
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	05 c0       	rjmp	.+10     	; 0x1c2 <Recieve_Buffer_Clr+0x10>
 1b8:	fc 01       	movw	r30, r24
 1ba:	ec 5f       	subi	r30, 0xFC	; 252
 1bc:	fe 4f       	sbci	r31, 0xFE	; 254
 1be:	10 82       	st	Z, r1
 1c0:	01 96       	adiw	r24, 0x01	; 1
 1c2:	82 33       	cpi	r24, 0x32	; 50
 1c4:	91 05       	cpc	r25, r1
 1c6:	c0 f3       	brcs	.-16     	; 0x1b8 <Recieve_Buffer_Clr+0x6>
	UART0_heder_flag = 0;
 1c8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	UART0_R_Count = 0;
 1cc:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <UART0_R_Count>
 1d0:	08 95       	ret

000001d2 <__vector_18>:
}
#pragma used-

ISR(USART0_RX_vect)
{
 1d2:	1f 92       	push	r1
 1d4:	0f 92       	push	r0
 1d6:	0f b6       	in	r0, 0x3f	; 63
 1d8:	0f 92       	push	r0
 1da:	11 24       	eor	r1, r1
 1dc:	0b b6       	in	r0, 0x3b	; 59
 1de:	0f 92       	push	r0
 1e0:	2f 93       	push	r18
 1e2:	3f 93       	push	r19
 1e4:	4f 93       	push	r20
 1e6:	5f 93       	push	r21
 1e8:	6f 93       	push	r22
 1ea:	7f 93       	push	r23
 1ec:	8f 93       	push	r24
 1ee:	9f 93       	push	r25
 1f0:	af 93       	push	r26
 1f2:	bf 93       	push	r27
 1f4:	cf 93       	push	r28
 1f6:	df 93       	push	r29
 1f8:	ef 93       	push	r30
 1fa:	ff 93       	push	r31
	// Data Recieve
	UART0_R_Data[UART0_R_Count] = getchar_0();
 1fc:	c0 91 01 01 	lds	r28, 0x0101	; 0x800101 <UART0_R_Count>
 200:	d0 e0       	ldi	r29, 0x00	; 0
 202:	cf df       	rcall	.-98     	; 0x1a2 <getchar_0>
 204:	cc 5f       	subi	r28, 0xFC	; 252
 206:	de 4f       	sbci	r29, 0xFE	; 254
 208:	88 83       	st	Y, r24
	//for(i = 0; i<=10; i++)
	//putchar_0(UART0_R_Data[i]);
	UART0_R_Count++;
 20a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <UART0_R_Count>
 20e:	8f 5f       	subi	r24, 0xFF	; 255
 210:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <UART0_R_Count>
	
	if((UART0_R_Data[UART0_R_Count-2] == 0xFF) && (UART0_R_Data[UART0_R_Count-1] == 0xFF))
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	fc 01       	movw	r30, r24
 218:	ee 5f       	subi	r30, 0xFE	; 254
 21a:	fe 4f       	sbci	r31, 0xFE	; 254
 21c:	20 81       	ld	r18, Z
 21e:	2f 3f       	cpi	r18, 0xFF	; 255
 220:	59 f4       	brne	.+22     	; 0x238 <__vector_18+0x66>
 222:	fc 01       	movw	r30, r24
 224:	ed 5f       	subi	r30, 0xFD	; 253
 226:	fe 4f       	sbci	r31, 0xFE	; 254
 228:	80 81       	ld	r24, Z
 22a:	8f 3f       	cpi	r24, 0xFF	; 255
 22c:	29 f4       	brne	.+10     	; 0x238 <__vector_18+0x66>
	{
		UART0_heder_flag = 1;
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		UART0_R_Count = 0;
 234:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <UART0_R_Count>
	}
	if((UART0_heder_flag == 1) && (UART0_R_Count >= 1))
 238:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 23c:	81 30       	cpi	r24, 0x01	; 1
 23e:	71 f4       	brne	.+28     	; 0x25c <__vector_18+0x8a>
 240:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <UART0_R_Count>
 244:	88 23       	and	r24, r24
 246:	51 f0       	breq	.+20     	; 0x25c <__vector_18+0x8a>
	{
		if(UART0_R_Data[0] == 0x05)
 248:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <UART0_R_Data>
 24c:	85 30       	cpi	r24, 0x05	; 5
 24e:	29 f4       	brne	.+10     	; 0x25a <__vector_18+0x88>
		{
			//Microwave_sens ON
			Microwave_sens_ena_flag = Microwave_sens_ena_flag | 0x01;		//Microwave_sens_ena_flag Set
 250:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <Microwave_sens_ena_flag>
 254:	81 60       	ori	r24, 0x01	; 1
 256:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <Microwave_sens_ena_flag>
		}
		Recieve_Buffer_Clr();
 25a:	ab df       	rcall	.-170    	; 0x1b2 <Recieve_Buffer_Clr>
	}
}
 25c:	ff 91       	pop	r31
 25e:	ef 91       	pop	r30
 260:	df 91       	pop	r29
 262:	cf 91       	pop	r28
 264:	bf 91       	pop	r27
 266:	af 91       	pop	r26
 268:	9f 91       	pop	r25
 26a:	8f 91       	pop	r24
 26c:	7f 91       	pop	r23
 26e:	6f 91       	pop	r22
 270:	5f 91       	pop	r21
 272:	4f 91       	pop	r20
 274:	3f 91       	pop	r19
 276:	2f 91       	pop	r18
 278:	0f 90       	pop	r0
 27a:	0b be       	out	0x3b, r0	; 59
 27c:	0f 90       	pop	r0
 27e:	0f be       	out	0x3f, r0	; 63
 280:	0f 90       	pop	r0
 282:	1f 90       	pop	r1
 284:	18 95       	reti

00000286 <__vector_16>:
ISR(TIMER0_OVF_vect)
{
 286:	1f 92       	push	r1
 288:	0f 92       	push	r0
 28a:	0f b6       	in	r0, 0x3f	; 63
 28c:	0f 92       	push	r0
 28e:	11 24       	eor	r1, r1
 290:	0b b6       	in	r0, 0x3b	; 59
 292:	0f 92       	push	r0
 294:	0f 93       	push	r16
 296:	1f 93       	push	r17
 298:	2f 93       	push	r18
 29a:	3f 93       	push	r19
 29c:	4f 93       	push	r20
 29e:	5f 93       	push	r21
 2a0:	6f 93       	push	r22
 2a2:	7f 93       	push	r23
 2a4:	8f 93       	push	r24
 2a6:	9f 93       	push	r25
 2a8:	af 93       	push	r26
 2aa:	bf 93       	push	r27
 2ac:	cf 93       	push	r28
 2ae:	df 93       	push	r29
 2b0:	ef 93       	push	r30
 2b2:	ff 93       	push	r31
	unsigned char high,low;
	float f_temp;
	unsigned short Distance0_cm;
	// Reinitialize Timer 0 value
	TCNT0=0xCE;
 2b4:	8e ec       	ldi	r24, 0xCE	; 206
 2b6:	82 bf       	out	0x32, r24	; 50
	Microwave0_cnt++;
 2b8:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <Microwave0_cnt>
 2bc:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <Microwave0_cnt+0x1>
 2c0:	01 96       	adiw	r24, 0x01	; 1
 2c2:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <Microwave0_cnt+0x1>
 2c6:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <Microwave0_cnt>
	if(!ECHO_get_level())
 2ca:	b1 99       	sbic	0x16, 1	; 22
 2cc:	1d c0       	rjmp	.+58     	; 0x308 <__vector_16+0x82>
	{
//		Microwave0_Distance = Microwave0_cnt;
//		Microwave0_cnt = 0;
		//Timer_0 Disable
		TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<TOIE0);
 2ce:	17 be       	out	0x37, r1	; 55
		if(Microwave0_cnt <= 1520)
 2d0:	c0 91 38 01 	lds	r28, 0x0138	; 0x800138 <Microwave0_cnt>
 2d4:	d0 91 39 01 	lds	r29, 0x0139	; 0x800139 <Microwave0_cnt+0x1>
 2d8:	c1 3f       	cpi	r28, 0xF1	; 241
 2da:	85 e0       	ldi	r24, 0x05	; 5
 2dc:	d8 07       	cpc	r29, r24
 2de:	84 f4       	brge	.+32     	; 0x300 <__vector_16+0x7a>
//			f_temp = (float)Microwave0_Distance * 25.0 / 58.0 / 2.0;
//			Distance0_cm = (unsigned short)(f_temp * 1000.0);
//			low = Distance0_cm & 0xff;
//			high = Distance0_cm >> 8;
			low = Microwave0_cnt & 0xff;
			high = Microwave0_cnt >> 8;
 2e0:	0d 2f       	mov	r16, r29
 2e2:	11 27       	eor	r17, r17
 2e4:	07 fd       	sbrc	r16, 7
 2e6:	1a 95       	dec	r17

			putchar_0(0xff);
 2e8:	8f ef       	ldi	r24, 0xFF	; 255
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	5e df       	rcall	.-324    	; 0x1aa <putchar_0>
			putchar_0(0xff);
 2ee:	8f ef       	ldi	r24, 0xFF	; 255
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	5b df       	rcall	.-330    	; 0x1aa <putchar_0>
			//putchar_0((unsigned char)Microwave0_Distance);
			//putchar_0((unsigned char)Microwave0_Distance >> 8);
			putchar_0(high);
 2f4:	c8 01       	movw	r24, r16
 2f6:	99 27       	eor	r25, r25
 2f8:	58 df       	rcall	.-336    	; 0x1aa <putchar_0>
			putchar_0(low);
 2fa:	ce 01       	movw	r24, r28
 2fc:	99 27       	eor	r25, r25
 2fe:	55 df       	rcall	.-342    	; 0x1aa <putchar_0>
 300:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <Microwave0_cnt+0x1>
		}
		Microwave0_cnt = 0;
 304:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <Microwave0_cnt>
 308:	ff 91       	pop	r31
	}
}
 30a:	ef 91       	pop	r30
 30c:	df 91       	pop	r29
 30e:	cf 91       	pop	r28
 310:	bf 91       	pop	r27
 312:	af 91       	pop	r26
 314:	9f 91       	pop	r25
 316:	8f 91       	pop	r24
 318:	7f 91       	pop	r23
 31a:	6f 91       	pop	r22
 31c:	5f 91       	pop	r21
 31e:	4f 91       	pop	r20
 320:	3f 91       	pop	r19
 322:	2f 91       	pop	r18
 324:	1f 91       	pop	r17
 326:	0f 91       	pop	r16
 328:	0f 90       	pop	r0
 32a:	0b be       	out	0x3b, r0	; 59
 32c:	0f 90       	pop	r0
 32e:	0f be       	out	0x3f, r0	; 63
 330:	0f 90       	pop	r0
 332:	1f 90       	pop	r1
 334:	18 95       	reti

00000336 <main>:
 336:	f8 94       	cli
int main(void)
{
	cli();
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
 338:	ba de       	rcall	.-652    	; 0xae <atmel_start_init>
	sei();
 33a:	78 94       	sei
	
	while (1)
	{
		if(Microwave_sens_ena_flag & 0x01)
 33c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <Microwave_sens_ena_flag>
 340:	80 ff       	sbrs	r24, 0
 342:	14 c0       	rjmp	.+40     	; 0x36c <main+0x36>
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTB |= 1 << pin;
 344:	88 b3       	in	r24, 0x18	; 24
 346:	81 60       	ori	r24, 0x01	; 1
 348:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 34a:	8a e6       	ldi	r24, 0x6A	; 106
 34c:	8a 95       	dec	r24
 34e:	f1 f7       	brne	.-4      	; 0x34c <main+0x16>
 350:	00 c0       	rjmp	.+0      	; 0x352 <main+0x1c>
	} else {
		PORTB &= ~(1 << pin);
 352:	88 b3       	in	r24, 0x18	; 24
 354:	8e 7f       	andi	r24, 0xFE	; 254
 356:	88 bb       	out	0x18, r24	; 24
		{
			TRIG_set_level(true);
			_delay_us(20);
			TRIG_set_level(false);
			Microwave_sens_ena_flag = Microwave_sens_ena_flag & 0xfe;	//Microwave_sens_ena_flag Clear
 358:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <Microwave_sens_ena_flag>
 35c:	8e 7f       	andi	r24, 0xFE	; 254
 35e:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <Microwave_sens_ena_flag>
			Microwave_Trig_flag = Microwave_Trig_flag | 0x01;			//Microwave_Trig_flag Set
 362:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Microwave_Trig_flag>
 366:	81 60       	ori	r24, 0x01	; 1
 368:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <Microwave_Trig_flag>
		}
		if((Microwave_Trig_flag & 0x01) && ECHO_get_level())
 36c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Microwave_Trig_flag>
 370:	80 ff       	sbrs	r24, 0
 372:	e4 cf       	rjmp	.-56     	; 0x33c <main+0x6>
 374:	b1 9b       	sbis	0x16, 1	; 22
 376:	e2 cf       	rjmp	.-60     	; 0x33c <main+0x6>
		{
			//Timer_0 Enable
			TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	87 bf       	out	0x37, r24	; 55
			Microwave_Trig_flag = Microwave_Trig_flag & 0xfe;			//Microwave_Trig_flag Clear
 37c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Microwave_Trig_flag>
 380:	8e 7f       	andi	r24, 0xFE	; 254
 382:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <Microwave_Trig_flag>
 386:	da cf       	rjmp	.-76     	; 0x33c <main+0x6>

00000388 <_exit>:
 388:	f8 94       	cli

0000038a <__stop_program>:
 38a:	ff cf       	rjmp	.-2      	; 0x38a <__stop_program>
